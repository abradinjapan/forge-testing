[ main ]
main()() = {
    [ test instruction generation ]
    forge.set(forge.integer.64)(at)
    forge.print.character(at)()
    forge.print.integer.unsigned(at)()

    [ new line ]
    print.new_line()()

    [ test offset ]
    @test

    [ test abstraction IO ]
    test.io()(a b)
    print.integer_and_new_line(a)()
    print.integer_and_new_line(b)()

    [ test predefined variables ]
    print.integer_and_new_line(forge.error_code)()

    [ test math ]
    test.math()()

    [ test looping ]
    forge.set(forge.integer.10)(loop_count)
    test.loop(loop_count)()
    print.new_line()()

    [ test setting ]
    test.set()()

    [ test address checking ]
    test.address_checker()()

    [ test buffer copy instruction ]
    test.buffer_copy()()

    [ test binary operations ]
    test.binary()()

    [ test flags ]
    test.flags()()

    [ test files ]
    test.file_io()()

    [ test run time coding ]
    test.run_time_coding()()

    [ test context io ]
    test.context_io()()
}

[ print new line ]
print.new_line()() = {
    [ set new line ]
    forge.set(forge.integer.10)(new_line)

    [ print ]
    forge.print.character(new_line)()
}

[ print space ]
print.space()() = {
    [ set character ]
    forge.set(forge.integer.32)(space)

    [ print ]
    forge.print.character(space)()
}

[ print cell as integer ]
print.integer.unsigned(value)() = {
    forge.cast.cell_to_unsigned_integer_string(value)(start end)
    forge.print.buffer_as_string(start end)()
    forge.memory.return(start end)()
}

[ print number with new line ]
print.integer_and_new_line(value)() = {
    [ print number ]
    print.integer.unsigned(value)()

    [ print new line ]
    print.new_line()()
}

[ test abstraction IO ]
test.io()(c d) = {
    forge.set(forge.integer.25)(a)
    test.io_subroutine(a)(b)
    print.integer_and_new_line(b)()
    forge.set(forge.integer.45)(c)
    forge.set(forge.integer.55)(d)
}
test.io_subroutine(c)(d) = {
    print.integer_and_new_line(c)()
    forge.set(forge.integer.35)(d)
}

[ test math ]
test.math()() = {
    [ setup variables ]
    forge.set(forge.integer.500)(x)
    forge.set(forge.integer.200)(y)

    [ do calculations ]
    forge.integer.add(x y)(result.add)
    forge.integer.subtract(x y)(result.subtract)
    forge.integer.multiply(x y)(result.multiply)
    forge.integer.divide(x y)(result.divide)
    forge.integer.modulous(x y)(result.modulous)

    [ print calculations ]
    print.integer_and_new_line(result.add)()
    print.integer_and_new_line(result.subtract)()
    print.integer_and_new_line(result.multiply)()
    print.integer_and_new_line(result.divide)()
    print.integer_and_new_line(result.modulous)()
    forge.print.binary(result.add)()
    print.new_line()()
}

[ test loop ]
test.loop(loop_count)() = {
    [ setup initial values ]
    forge.set(forge.integer.0)(index)
    forge.set(forge.integer.0)(start)
    forge.set(forge.integer.1)(increment)

    [ setup loop start ]
    @loop.start

    [ check if loop is still valid ]
    forge.integer.within_range(start index loop_count #forge.always)(#exit_loop)
    forge.jump(#exit_loop @loop.exit)()

    [ print value ]
    print.integer_and_new_line(index)()

    [ increment index ]
    forge.integer.add(index increment)(index)

    [ go to start of loop ]
    forge.jump(#forge.always @loop.start)()

    [ setup loop exit ]
    @loop.exit
}

[ test literals / sets ]
test.set()() = {
    [ perform literal sets ]
    forge.set(forge.boolean.true)(true)
    forge.set(forge.boolean.false)(false)
    forge.set(forge.binary.1010)(binary)
    forge.set(forge.integer.234561)(integer)
    forge.set(forge.hexadecimal.feedbeef)(hexadecimal)

    [ perform offset sets ]
    @offset
    forge.set(@offset)(offset)

    [ perform string sets ]
    forge.set("Hello World!")(message.start message.end)

    [ print values ]
    print.integer_and_new_line(true)()
    print.integer_and_new_line(false)()
    print.integer_and_new_line(binary)()
    print.integer_and_new_line(integer)()
    print.integer_and_new_line(hexadecimal)()
    print.integer_and_new_line(offset)()
    forge.print.buffer_as_string(message.start message.end)()

    [ next line ]
    print.new_line()()
}

[ test address checking ]
test.address_checker()() = {
    [ create & print strings ]
    forge.set("%25;Testing addr%3C;ess checker.%25;")(message.start message.end)
    forge.print.buffer_as_string(message.start message.end)()
    print.new_line()()

    [ print error code ]
    print.integer_and_new_line(forge.error_code)()

    [ reset error code ]
    forge.reset.error_code()()

    [ print error code ]
    print.integer_and_new_line(forge.error_code)()

    [ test address ]
    forge.set(forge.integer.0)(null)
    forge.set(forge.integer.8)(bits)
    forge.io.address_to_cell(#forge.always null bits)(oof)

    [ print error code ]
    print.integer_and_new_line(forge.error_code)()
    print.integer_and_new_line(forge.error_code)()

    [ reset error code ]
    forge.reset.error_code()()
    
    [ print error code ]
    print.integer_and_new_line(forge.error_code)()

    [ print new lines for next test ]
    print.new_line()()
    print.new_line()()

    [ allocate memory ]
    forge.set(forge.integer.10)(length)
    forge.memory.request(length)(buffer.start buffer.end)

    [ setup addresses ]
    forge.set(forge.integer.1)(adjust)
    forge.copy(buffer.start)(address)
    forge.integer.subtract(address adjust)(lower_invalid_address)
    forge.copy(buffer.end)(address)
    forge.integer.add(address adjust)(upper_invalid_address)

    [ test addresses ]
    test.address_is_valid(buffer.start)()
    test.address_is_valid(buffer.end)()
    test.address_is_valid(lower_invalid_address)()
    test.address_is_valid(upper_invalid_address)()

    [ clean up memory ]
    forge.memory.return(buffer.start buffer.end)()

    [ test addresses again ]
    test.address_is_valid(buffer.start)()
    test.address_is_valid(buffer.end)()
    test.address_is_valid(lower_invalid_address)()
    test.address_is_valid(upper_invalid_address)()

    [ test buffer length calculator ]
    forge.buffer.calculate_length(lower_invalid_address upper_invalid_address)(length)
    print.integer_and_new_line(length)()
}

[ test one address for validity ]
test.address_is_valid(address)() = {
    [ setup variables ]
    forge.set(forge.integer.8)(bit_count)
    forge.set(forge.integer.1234)(write)

    [ reset error code for demonstration ]
    forge.reset.error_code()()

    [ test read ]
    forge.io.address_to_cell(#forge.always address bit_count)(read)
    print.integer.unsigned(forge.error_code)()
    print.space()()

    [ reset error code ]
    forge.reset.error_code()()

    [ test write ]
    forge.io.cell_to_address(#forge.always write bit_count)(address)
    print.integer.unsigned(forge.error_code)()
    print.new_line()()
}

[ test the buffer copy instruction ]
test.buffer_copy()() = {
    [ open string ]
    forge.set("I might be a duplicate buffer! :p")(a.start a.end)

    [ calculate length ]
    forge.buffer.calculate_length(a.start a.end)(length)

    [ allocate buffer ]
    [ forge.integer.add(length length)(length) [ make lengths different ] ]
    forge.memory.request(length)(b.start b.end)

    [ print unaltered buffers ]
    forge.print.buffer_as_string(a.start a.end)()
    print.new_line()()
    forge.print.buffer_as_string(b.start b.end)()
    print.new_line()()

    [ perform copy ]
    forge.copy.buffer(a.start a.end)(b.start b.end)

    [ print result ]
    forge.print.buffer_as_string(b.start b.end)()
    print.new_line()()

    [ return memory ]
    forge.memory.return(b.start b.end)()
}

[ test binary instructions ]
test.binary()() = {
    [ setup variables ]
    forge.set(forge.binary.11110000)(a)
    forge.set(forge.binary.11001100)(b)
    forge.set(forge.binary.10101010)(c)
    forge.set(forge.integer.2)(shift)

    [ perform operations ]
    forge.binary.or(a b)(or.result)
    forge.binary.invert(a)(invert.result)
    forge.binary.and(a b)(and.result)
    forge.binary.xor(a b)(xor.result)
    forge.binary.shift_higher(a shift)(higher.result)
    forge.binary.shift_lower(a shift)(lower.result)
    forge.binary.overwrite(a b c)(overwrite.result)

    [ print results ]
    forge.print.binary(or.result)()
    print.new_line()()
    forge.print.binary(invert.result)()
    print.new_line()()
    forge.print.binary(and.result)()
    print.new_line()()
    forge.print.binary(xor.result)()
    print.new_line()()
    forge.print.binary(higher.result)()
    print.new_line()()
    forge.print.binary(lower.result)()
    print.new_line()()
    forge.print.binary(overwrite.result)()
    print.new_line()()
}

[ test flags ]
test.flags()() = {
    [ setup flags ]
    forge.set(forge.boolean.false)(false)
    forge.set(forge.boolean.true)(true)
    forge.flag.set(false)(#hello_world)
    forge.set(#hello_world)(flag_ID)

    [ get flag ]
    forge.flag.get(#hello_world)(value)

    [ print values ]
    print.integer_and_new_line(flag_ID)()
    print.integer_and_new_line(value)()

    [ test flag inversion ]
    forge.flag.invert(#hello_world)(#subscribe)
    forge.set(#subscribe)(flag_ID)
    print.integer_and_new_line(flag_ID)()
    print.integer_and_new_line(value)()
    forge.flag.get(#subscribe)(value)
    print.integer_and_new_line(value)()
    print.new_line()()

    [ test flag or ]
    forge.flag.set(false)(#a)
    forge.flag.set(false)(#b)
    forge.flag.or(#a #b)(#c)
    forge.flag.get(#c)(value)
    print.integer_and_new_line(value)()
    print.new_line()()

    [ test flag and ]
    forge.flag.set(true)(#a)
    forge.flag.set(true)(#b)
    forge.flag.and(#a #b)(#c)
    forge.flag.get(#c)(value)
    print.integer_and_new_line(value)()
    print.new_line()()

    [ test flag xor ]
    forge.flag.set(true)(#a)
    forge.flag.set(true)(#b)
    forge.flag.xor(#a #b)(#c)
    forge.flag.get(#c)(value)
    print.integer_and_new_line(value)()
    print.new_line()()
}

[ test file IO ]
test.file_io()() = {
    [ setup string data ]
    forge.set("oof")(message.start message.end)
    forge.set("../temp.txt")(path.start path.end)

    [ write file ]
    forge.io.buffer_to_file(message.start message.end)(path.start path.end)

    [ read file ]
    forge.io.file_to_buffer(path.start path.end)(file.start file.end)

    [ print file ]
    forge.print.buffer_as_string(file.start file.end)()

    [ return memory ]
    forge.memory.return(file.start file.end)()
}

[ test rtc ]
test.run_time_coding()() = {
    [ setup file paths ]
    forge.set("../forge-testing/hello_world.forge")(path_1.start path_1.end)
    forge.set("../forge-testing/printing.forge")(path_2.start path_2.end)

    [ load programs ]
    forge.io.file_to_buffer(path_1.start path_1.end)(user_code_1.start user_code_1.end)
    forge.io.file_to_buffer(path_2.start path_2.end)(user_code_2.start user_code_2.end)

    [ DEBUG ]
    forge.print.buffer_as_string(user_code_1.start user_code_1.end)()
    forge.print.buffer_as_string(user_code_2.start user_code_2.end)()

    [ create user codes buffer ]
    forge.set(forge.integer.32)(buffer_size)
    forge.memory.request(buffer_size)(codes.start codes.end)

    [ append buffers ]
    forge.set(forge.integer.64)(bit_size)
    forge.set(forge.integer.8)(byte_size)
    forge.copy(codes.start)(address)
    forge.io.cell_to_address(#forge.always user_code_1.start bit_size)(address)
    forge.integer.add(address byte_size)(address)
    forge.io.cell_to_address(#forge.always user_code_1.end bit_size)(address)
    forge.integer.add(address byte_size)(address)
    forge.io.cell_to_address(#forge.always user_code_2.start bit_size)(address)
    forge.integer.add(address byte_size)(address)
    forge.io.cell_to_address(#forge.always user_code_2.end bit_size)(address)

    [ compile ]
    forge.set(forge.boolean.false)(debug)
    forge.compile(codes.start codes.end debug)(program.start program.end error_occured error_message.start error_message.end location.file_index location.line_number location.character_index)

    [ skip past running program and print error if compilation failure ]
    forge.integer.within_range(forge.constant.true error_occured forge.constant.true #forge.never)(#print_error)
    forge.jump(#print_error @print_error)()

    [ setup context ]
    forge.open.context(program.start program.end)(context.start context.end)

    [ run ]
    forge.set(forge.integer.n1)(run_instruction_count)
    forge.run(context.start context.end run_instruction_count)()

    [ skip past error printing ]
    forge.jump(#forge.always @clean_up)()

    [ print error ]
    @print_error
    forge.print.buffer_as_string(error_message.start error_message.end)()
    forge.memory.return(error_message.start error_message.end)()

    [ clean up ]
    @clean_up
    forge.memory.return(user_code_1.start user_code_1.end)()
    forge.memory.return(user_code_2.start user_code_2.end)()
    forge.memory.return(codes.start codes.end)()
    forge.memory.return(context.start context.end)()
    forge.memory.return(program.start program.end)()
}

[ test context io ]
test.context_io()() = {
    [ setup file paths ]
    forge.set("./test-context-io.forge")(path_1.start path_1.end)

    [ load programs ]
    forge.io.file_to_buffer(path_1.start path_1.end)(user_code_1.start user_code_1.end)

    [ create user codes buffer ]
    forge.set(forge.integer.16)(buffer_size)
    forge.memory.request(buffer_size)(codes.start codes.end)

    [ append buffers ]
    forge.copy(codes.start)(address)
    forge.io.cell_to_address(#forge.always user_code_1.start forge.constant.cell_bit_size)(address)
    forge.integer.add(address forge.constant.cell_byte_size)(address)
    forge.io.cell_to_address(#forge.always user_code_1.end forge.constant.cell_bit_size)(address)

    [ compile ]
    forge.set(forge.boolean.false)(debug)
    forge.compile(codes.start codes.end debug)(program.start program.end error_occured error_message.start error_message.end location.file_index location.line_number location.character_index)

    [ skip past running program and print error if compilation failure ]
    forge.integer.within_range(forge.constant.true error_occured forge.constant.true #forge.never)(#print_error)
    forge.jump(#print_error @print_error)()

    [ setup context ]
    forge.open.context(program.start program.end)(context.start context.end)

    [ pass context input ]
    forge.set("Context input received and printed!")(input.start input.end)
    forge.context_buffer.set_inputs(context.start context.end input.start input.end)()

    [ run ]
    forge.set(forge.integer.n1)(run_instruction_count)
    forge.run(context.start context.end run_instruction_count)()

    [ print context output ]
    forge.context_buffer.get_outputs(context.start context.end)(output.start output.end)
    forge.print.buffer_as_string(output.start output.end)()

    [ skip past error printing ]
    forge.jump(#forge.always @clean_up)()

    [ print error ]
    @print_error
    forge.print.buffer_as_string(error_message.start error_message.end)()
    forge.memory.return(error_message.start error_message.end)()

    [ clean up ]
    @clean_up
    forge.memory.return(user_code_1.start user_code_1.end)()
    forge.memory.return(codes.start codes.end)()
    forge.memory.return(context.start context.end)()
    forge.memory.return(program.start program.end)()
}
